package com.airport.security.util;import com.airport.security.config.SecurityConstants;import com.airport.util.ProjectDate;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import lombok.RequiredArgsConstructor;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;import java.util.Base64;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import static io.jsonwebtoken.Claims.EXPIRATION;import static io.jsonwebtoken.Claims.ISSUED_AT;import static io.jsonwebtoken.Claims.SUBJECT;@Component@RequiredArgsConstructorpublic class TokenUtil {	private static final String ROLES = "roles";	private final SecurityConstants securityConstants;	private final ProjectDate projectDate;	private String secret;	@PostConstruct	protected void init() {		secret = Base64.getEncoder ()		               .encodeToString (securityConstants.getSecret ()		                                                 .getBytes ());	}	public String getUserFromToken (String token) {		return getClaimsFromToken (token).getSubject ();	}	public Date getExpirationDateFromToken (String token) {		return getClaimsFromToken (token).getExpiration ();	}	private Claims getClaimsFromToken (String token) {		return Jwts.parser ()		           .setSigningKey (secret)		           .parseClaimsJws (token.replace (securityConstants.getPrefix (), ""))		           .getBody ();	}	public String generateToken (UserDetails userDetails) {		Map<String, Object> claims = new HashMap<> ();		claims.put (SUBJECT, userDetails.getUsername ());		claims.put (EXPIRATION, securityConstants.getExpire ());		claims.put (ISSUED_AT, projectDate.getCurrentTime ());		claims.put (ROLES, getEncryptedRole (userDetails));		return Jwts.builder ()		           .setClaims (claims)		           .signWith (SignatureAlgorithm.HS512, secret)		           .compact ();	}	private List<String> getEncryptedRole (UserDetails userDetails) {		return userDetails.getAuthorities ()		                  .stream ()		                  .map (GrantedAuthority::getAuthority)		                  .map (s -> s.replace ("ROLE_", ""))		                  .map (String::toLowerCase)		                  .collect (Collectors.toList ());	}	public boolean validateToken (String token, UserDetails userDetails) {		String usernameToken = getUserFromToken (token);		Date expirationDateFromToken = getExpirationDateFromToken (token);		return usernameToken.equals (userDetails.getUsername ()) && projectDate.getCurrentTime ().before (expirationDateFromToken) ;	}}